"""Simplified relationships for building instances

Revision ID: a7b37f961c5c
Revises: 8b8035bcacd7
Create Date: 2025-05-11 20:46:12.065634

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = 'a7b37f961c5c'
down_revision: Union[str, None] = '8b8035bcacd7'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('stage_resource_costs')
    op.drop_index('ix_stage_profession_costs_profession_name', table_name='stage_profession_costs')
    op.drop_table('stage_profession_costs')
    op.add_column('blueprint_stages', sa.Column('resource_costs', postgresql.JSONB(astext_type=sa.Text()), nullable=True, comment='List of resource costs for this stage.'))
    op.add_column('blueprint_stages', sa.Column('profession_time_bonus', postgresql.JSONB(astext_type=sa.Text()), nullable=True, comment='Bonuses from professions affecting stage duration.'))
    op.add_column('blueprint_stages', sa.Column('stage_completion_bonuses', postgresql.JSONB(astext_type=sa.Text()), nullable=True, comment='Bonuses applied upon completing this stage.'))
    op.alter_column('blueprint_stages', 'name',
               existing_type=sa.VARCHAR(length=100),
               type_=sa.String(length=150),
               nullable=False,
               comment='Name for the stage (e.g., Foundation, Framing)',
               existing_comment='Optional name for the stage (e.g., Foundation, Framing)')
    op.alter_column('blueprint_stages', 'duration_days',
               existing_type=sa.INTEGER(),
               type_=sa.Float(),
               existing_comment='Time required to complete this stage (e.g., in game days).',
               existing_nullable=False,
               existing_server_default=sa.text('1'))
    op.alter_column('themes', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=True,
               existing_server_default=sa.text('now()'))
    op.drop_index('ix_themes_name', table_name='themes')
    op.create_unique_constraint(None, 'themes', ['name'])
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint(None, 'themes', type_='unique')
    op.create_index('ix_themes_name', 'themes', ['name'], unique=True)
    op.alter_column('themes', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=False,
               existing_server_default=sa.text('now()'))
    op.alter_column('blueprint_stages', 'duration_days',
               existing_type=sa.Float(),
               type_=sa.INTEGER(),
               existing_comment='Time required to complete this stage (e.g., in game days).',
               existing_nullable=False,
               existing_server_default=sa.text('1'))
    op.alter_column('blueprint_stages', 'name',
               existing_type=sa.String(length=150),
               type_=sa.VARCHAR(length=100),
               nullable=True,
               comment='Optional name for the stage (e.g., Foundation, Framing)',
               existing_comment='Name for the stage (e.g., Foundation, Framing)')
    op.drop_column('blueprint_stages', 'stage_completion_bonuses')
    op.drop_column('blueprint_stages', 'profession_time_bonus')
    op.drop_column('blueprint_stages', 'resource_costs')
    op.create_table('stage_profession_costs',
    sa.Column('blueprint_stage_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('profession_name', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('count', sa.INTEGER(), server_default=sa.text('1'), autoincrement=False, nullable=False, comment='Number of workers with this profession required for the stage.'),
    sa.ForeignKeyConstraint(['blueprint_stage_id'], ['blueprint_stages.id'], name='fk_profession_cost_stage_id', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('blueprint_stage_id', 'profession_name', name='pk_stage_profession_costs')
    )
    op.create_index('ix_stage_profession_costs_profession_name', 'stage_profession_costs', ['profession_name'], unique=False)
    op.create_table('stage_resource_costs',
    sa.Column('blueprint_stage_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('resource_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('count', sa.INTEGER(), autoincrement=False, nullable=False, comment='Number of units of this resource required for the stage.'),
    sa.ForeignKeyConstraint(['blueprint_stage_id'], ['blueprint_stages.id'], name='fk_resource_cost_stage_id', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['resource_id'], ['resources.id'], name='fk_resource_cost_resource_id', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('blueprint_stage_id', 'resource_id', name='pk_stage_resource_costs')
    )
    # ### end Alembic commands ###
