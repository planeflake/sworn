# In C:\Projects\sworn\app\db\alembic\versions\68decf145366_resource_modified.py

"""Resource Modified

Revision ID: 68decf145366
Revises: 3a6df51597af # <-- Make sure this points to your previous revision ID
Create Date: ...

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
# Import necessary types if needed later, like postgresql for UUID
# from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '68decf145366'
down_revision: Union[str, None] = '3a6df51597af' # <-- Make sure this is correct
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


# Define Enum type name and values for clarity and reuse
rarity_enum_name = 'rarity_enum'
rarity_enum_values = ('COMMON', 'UNCOMMON', 'RARE', 'EPIC', 'LEGENDARY', 'MYTHICAL', 'HEAVENLY')

# Repeat for status enum if that column is also added in this migration
status_enum_name = 'status_enum'
status_enum_values = ('ACTIVE', 'INACTIVE', 'DELETED') # Add PENDING if needed


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###

    # --- Create the ENUM types FIRST ---
    op.execute(f"CREATE TYPE {rarity_enum_name} AS ENUM({', '.join(repr(v) for v in rarity_enum_values)})")
    op.execute(f"CREATE TYPE {status_enum_name} AS ENUM({', '.join(repr(v) for v in status_enum_values)})")
    # ---

    # --- Add columns using the existing ENUM type name ---
    op.add_column('resources', sa.Column('rarity', sa.Enum(*rarity_enum_values, name=rarity_enum_name), nullable=True)) # Pass values tuple here too
    op.add_column('resources', sa.Column('stack_size', sa.Integer(), server_default='100', nullable=False))
    op.add_column('resources', sa.Column('status', sa.Enum(*status_enum_values, name=status_enum_name), server_default='ACTIVE', nullable=False)) # Pass values tuple here too
    op.create_index(op.f('ix_resources_name'), 'resources', ['name'], unique=True) # Example adjusted index
    op.create_index(op.f('ix_resources_rarity'), 'resources', ['rarity'], unique=False) # Example adjusted index
    op.create_index(op.f('ix_resources_status'), 'resources', ['status'], unique=False) # Example adjusted index
    # Note: Alembic might generate slightly different index names (op.f(...)), keep those if preferred.
    # Adjust server_default values if needed (e.g., using the enum value: StatusEnum.ACTIVE.value)

    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###

    # --- Drop columns FIRST ---
    op.drop_index(op.f('ix_resources_status'), table_name='resources')
    op.drop_index(op.f('ix_resources_rarity'), table_name='resources')
    op.drop_index(op.f('ix_resources_name'), table_name='resources')
    op.drop_column('resources', 'status')
    op.drop_column('resources', 'stack_size')
    op.drop_column('resources', 'rarity')

    # --- Drop the ENUM types LAST ---
    op.execute(f"DROP TYPE {status_enum_name}")
    op.execute(f"DROP TYPE {rarity_enum_name}")
    # ---

    # ### end Alembic commands ###