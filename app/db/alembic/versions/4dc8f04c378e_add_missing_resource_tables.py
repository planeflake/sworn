"""add missing resource tables

Revision ID: 4dc8f04c378e
Revises: ffadf0df7a98
Create Date: 2025-05-31 03:00:55.491814

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '4dc8f04c378e'
down_revision: Union[str, None] = 'ffadf0df7a98'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('resource_node_blueprints',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), nullable=False),
    sa.Column('name', sa.String(length=100), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('biome_type', sa.String(length=50), nullable=True),
    sa.Column('depleted', sa.Boolean(), nullable=False),
    sa.Column('status', sa.Enum('ACTIVE', 'INACTIVE', 'PENDING', 'ARCHIVED', name='resource_node_status_enum'), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('_metadata', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('tags', postgresql.ARRAY(sa.String()), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_resource_node_blueprints_name'), 'resource_node_blueprints', ['name'], unique=True)
    op.create_index(op.f('ix_resource_node_blueprints_status'), 'resource_node_blueprints', ['status'], unique=False)
    op.create_table('character_faction_relationships',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('character_id', sa.UUID(), nullable=False),
    sa.Column('faction_id', sa.UUID(), nullable=False),
    sa.Column('reputation_score', sa.Integer(), nullable=False, comment='Reputation score from -100 (enemy) to +100 (ally)'),
    sa.Column('relationship_status', sa.Enum('ALLY', 'FRIENDLY', 'NEUTRAL', 'HOSTILE', 'ENEMY', 'UNKNOWN', name='relationship_status_enum'), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('last_interaction', sa.DateTime(timezone=True), nullable=True),
    sa.ForeignKeyConstraint(['character_id'], ['characters.id'], name='fk_char_faction_rel_character', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['faction_id'], ['factions.id'], name='fk_char_faction_rel_faction', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_character_faction_relationships_character_id'), 'character_faction_relationships', ['character_id'], unique=False)
    op.create_index(op.f('ix_character_faction_relationships_faction_id'), 'character_faction_relationships', ['faction_id'], unique=False)
    op.create_table('resource_instances',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), nullable=False),
    sa.Column('resource_id', sa.UUID(), nullable=False),
    sa.Column('resource_count', sa.Integer(), nullable=False),
    sa.Column('owner_id', sa.UUID(), nullable=False),
    sa.Column('owner_type', sa.String(length=50), nullable=False),
    sa.Column('_metadata', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.ForeignKeyConstraint(['resource_id'], ['resources.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_resource_instances_owner_id'), 'resource_instances', ['owner_id'], unique=False)
    op.create_index(op.f('ix_resource_instances_owner_type'), 'resource_instances', ['owner_type'], unique=False)
    op.create_table('resource_node_blueprint_resources',
    sa.Column('blueprint_id', sa.UUID(), nullable=False),
    sa.Column('resource_id', sa.UUID(), nullable=False),
    sa.Column('is_primary', sa.Boolean(), nullable=False),
    sa.Column('chance', sa.Float(), nullable=False),
    sa.Column('amount_min', sa.Integer(), nullable=False),
    sa.Column('amount_max', sa.Integer(), nullable=False),
    sa.Column('purity', sa.Float(), nullable=False),
    sa.Column('rarity', sa.String(length=50), nullable=False),
    sa.Column('_metadata', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('theme_id', sa.UUID(), nullable=True),
    sa.ForeignKeyConstraint(['blueprint_id'], ['resource_node_blueprints.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['resource_id'], ['resources.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['theme_id'], ['themes.id'], ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('blueprint_id', 'resource_id')
    )
    op.create_index(op.f('ix_resource_node_blueprint_resources_theme_id'), 'resource_node_blueprint_resources', ['theme_id'], unique=False)
    op.create_table('resource_nodes',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), nullable=False),
    sa.Column('name', sa.String(length=100), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('biome_type', sa.String(length=50), nullable=True),
    sa.Column('depleted', sa.Boolean(), nullable=False),
    sa.Column('status', sa.Enum('ACTIVE', 'INACTIVE', 'PENDING', 'ARCHIVED', name='resource_node_status_enum'), nullable=False),
    sa.Column('visibility', sa.Enum('INVISIBLE', 'HIDDEN', 'RUMOURED', 'DISCOVERABLE', 'DISCOVERED', 'VISIBLE', 'HARVESTABLE', name='resource_node_visibility_enum'), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('_metadata', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('tags', postgresql.ARRAY(sa.String()), nullable=True),
    sa.Column('location_id', sa.UUID(), nullable=True),
    sa.ForeignKeyConstraint(['location_id'], ['location_entities.id'], name='fk_resource_node_location'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_resource_nodes_location_id'), 'resource_nodes', ['location_id'], unique=False)
    op.create_index(op.f('ix_resource_nodes_name'), 'resource_nodes', ['name'], unique=True)
    op.create_index(op.f('ix_resource_nodes_status'), 'resource_nodes', ['status'], unique=False)
    op.create_index(op.f('ix_resource_nodes_visibility'), 'resource_nodes', ['visibility'], unique=False)
    op.create_table('travel_links',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('name', sa.String(length=200), nullable=False, comment='Name of the travel route'),
    sa.Column('from_location_id', sa.UUID(), nullable=False),
    sa.Column('to_location_id', sa.UUID(), nullable=False),
    sa.Column('speed', sa.Float(), nullable=False, comment='Speed multiplier for travel (1.0 = normal speed)'),
    sa.Column('path_type', sa.String(length=50), nullable=False, comment='Type of path (road, trail, forest path, etc.)'),
    sa.Column('terrain_modifier', sa.Float(), nullable=False, comment='Terrain difficulty modifier (0.5 = easier, 2.0 = harder)'),
    sa.Column('base_danger_level', sa.Integer(), nullable=False, comment='Base danger level for this route (1-10)'),
    sa.Column('distance_km', sa.Float(), nullable=True, comment='Distance in kilometers'),
    sa.Column('base_travel_time_hours', sa.Float(), nullable=True, comment='Base travel time in hours'),
    sa.Column('visibility', sa.String(length=20), nullable=False, comment='Visibility status: visible, hidden, secret'),
    sa.Column('is_active', sa.Boolean(), nullable=False, comment='Whether this travel link is currently usable'),
    sa.Column('weather_affected', sa.Boolean(), nullable=False, comment='Whether weather affects travel on this route'),
    sa.Column('seasonal_modifiers', postgresql.JSONB(astext_type=sa.Text()), nullable=True, comment='Seasonal travel modifiers (JSON object)'),
    sa.Column('biome_ids', postgresql.ARRAY(sa.UUID()), nullable=True, comment='Biomes encountered during travel'),
    sa.Column('faction_ids', postgresql.ARRAY(sa.UUID()), nullable=True, comment='Factions with influence along this route'),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('notes', sa.Text(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
    sa.ForeignKeyConstraint(['from_location_id'], ['location_entities.id'], name='fk_travel_from_location', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['to_location_id'], ['location_entities.id'], name='fk_travel_to_location', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_travel_links_from_location_id'), 'travel_links', ['from_location_id'], unique=False)
    op.create_index(op.f('ix_travel_links_to_location_id'), 'travel_links', ['to_location_id'], unique=False)
    op.create_table('wildlife',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('name', sa.String(length=100), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('wildlife_type', sa.Enum('HERBIVORE', 'CARNIVORE', 'OMNIVORE', 'MAGICAL_CREATURE', 'BANDIT', 'MONSTER', 'UNDEAD', 'ELEMENTAL', name='wildlife_type_enum'), nullable=False),
    sa.Column('threat_level', sa.Enum('HARMLESS', 'PASSIVE', 'DEFENSIVE', 'AGGRESSIVE', 'HOSTILE', 'DEADLY', name='wildlife_threat_level_enum'), nullable=False),
    sa.Column('location_id', sa.UUID(), nullable=False),
    sa.Column('population', sa.Integer(), nullable=False, comment='Current population in this location'),
    sa.Column('max_population', sa.Integer(), nullable=False, comment='Maximum sustainable population'),
    sa.Column('spawn_rate', sa.Float(), nullable=False, comment='Daily spawn rate (0.0 to 1.0)'),
    sa.Column('danger_rating', sa.Integer(), nullable=False, comment='Individual danger rating (1-10)'),
    sa.Column('pack_behavior', sa.Boolean(), nullable=False, comment='Whether creatures group together for increased danger'),
    sa.Column('pack_size_min', sa.Integer(), nullable=False, comment='Minimum pack size'),
    sa.Column('pack_size_max', sa.Integer(), nullable=False, comment='Maximum pack size'),
    sa.Column('territorial', sa.Boolean(), nullable=False, comment='Whether creatures defend territory aggressively'),
    sa.Column('nocturnal', sa.Boolean(), nullable=False, comment='Whether creatures are more active at night'),
    sa.Column('seasonal_activity', postgresql.JSONB(astext_type=sa.Text()), nullable=True, comment='Seasonal activity modifiers'),
    sa.Column('preferred_biome_ids', postgresql.ARRAY(sa.UUID()), nullable=True, comment='Biomes where this wildlife thrives'),
    sa.Column('drops_resources', sa.Boolean(), nullable=False, comment='Whether defeating this wildlife drops resources'),
    sa.Column('resource_drops', postgresql.JSONB(astext_type=sa.Text()), nullable=True, comment='Resources that can be obtained from this wildlife'),
    sa.Column('is_active', sa.Boolean(), nullable=False, comment='Whether this wildlife is currently active in the location'),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('last_spawn', sa.DateTime(timezone=True), nullable=True),
    sa.ForeignKeyConstraint(['location_id'], ['location_entities.id'], name='fk_wildlife_location', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_wildlife_location_id'), 'wildlife', ['location_id'], unique=False)
    op.create_index(op.f('ix_wildlife_name'), 'wildlife', ['name'], unique=False)
    op.create_index(op.f('ix_wildlife_threat_level'), 'wildlife', ['threat_level'], unique=False)
    op.create_index(op.f('ix_wildlife_wildlife_type'), 'wildlife', ['wildlife_type'], unique=False)
    op.create_table('resource_node_resources',
    sa.Column('node_id', sa.UUID(), nullable=False),
    sa.Column('resource_id', sa.UUID(), nullable=False),
    sa.Column('is_primary', sa.Boolean(), nullable=False),
    sa.Column('chance', sa.Float(), nullable=False),
    sa.Column('amount_min', sa.Integer(), nullable=False),
    sa.Column('amount_max', sa.Integer(), nullable=False),
    sa.Column('purity', sa.Float(), nullable=False),
    sa.Column('rarity', sa.String(), nullable=False),
    sa.Column('_metadata', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.ForeignKeyConstraint(['node_id'], ['resource_nodes.id'], ),
    sa.ForeignKeyConstraint(['resource_id'], ['resources.id'], ),
    sa.PrimaryKeyConstraint('node_id', 'resource_id')
    )
    # IMPORTANT: Update foreign key references BEFORE dropping tables
    op.add_column('characters', sa.Column('default_faction_id', sa.UUID(), nullable=True))
    op.create_index(op.f('ix_characters_default_faction_id'), 'characters', ['default_faction_id'], unique=False)
    op.drop_constraint('fk_char_location_id', 'characters', type_='foreignkey')
    op.create_foreign_key('fk_char_location_id', 'characters', 'location_entities', ['current_location_id'], ['id'], ondelete='SET NULL')
    op.create_foreign_key('fk_character_default_faction', 'characters', 'factions', ['default_faction_id'], ['id'], ondelete='SET NULL')
    
    # NOW safe to drop the old tables since foreign keys are updated
    op.drop_index('ix_location_world_coords', table_name='locations')
    op.drop_index('ix_locations_name', table_name='locations')
    op.drop_index('ix_locations_world_id', table_name='locations')
    op.drop_table('locations')
    op.drop_index('ix_character_actions_action_type', table_name='character_actions')
    op.drop_index('ix_character_actions_character_id', table_name='character_actions')
    op.drop_index('ix_character_actions_status', table_name='character_actions')
    op.drop_table('character_actions')
    op.drop_constraint('uq_unique_faction', 'factions', type_='unique')
    op.add_column('location_entities', sa.Column('theme_id', sa.UUID(), nullable=True))
    op.add_column('location_entities', sa.Column('biome_id', sa.UUID(), nullable=True))
    op.add_column('location_entities', sa.Column('location_sub_type', sa.String(length=50), nullable=True, comment='Sub-type of the location (e.g., Village, Town, Capital)'))
    op.add_column('location_entities', sa.Column('base_danger_level', sa.Integer(), server_default='1', nullable=False, comment='Base danger level from 1-10'))
    op.add_column('location_entities', sa.Column('controlled_by_faction_id', sa.UUID(), nullable=True))
    op.alter_column('location_entities', 'description',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=True)
    op.alter_column('location_entities', 'attributes',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               comment='Custom attributes for the location entity.',
               existing_nullable=False,
               existing_server_default=sa.text("'{}'::jsonb"))
    op.drop_index('ix_location_entities_name', table_name='location_entities')
    op.create_index(op.f('ix_location_entities_biome_id'), 'location_entities', ['biome_id'], unique=False)
    op.create_index(op.f('ix_location_entities_controlled_by_faction_id'), 'location_entities', ['controlled_by_faction_id'], unique=False)
    op.create_index(op.f('ix_location_entities_theme_id'), 'location_entities', ['theme_id'], unique=False)
    op.drop_constraint('fk_parent_location_type', 'location_entities', type_='foreignkey')
    op.drop_constraint('fk_parent_location', 'location_entities', type_='foreignkey')
    op.create_foreign_key('fk_parent_location_type', 'location_entities', 'location_types', ['parent_type_id'], ['id'], ondelete='SET NULL')
    op.create_foreign_key('fk_location_biome_id', 'location_entities', 'biomes', ['biome_id'], ['id'], ondelete='SET NULL')
    op.create_foreign_key('fk_location_controlling_faction', 'location_entities', 'factions', ['controlled_by_faction_id'], ['id'], ondelete='SET NULL')
    op.create_foreign_key('fk_location_theme_id', 'location_entities', 'themes', ['theme_id'], ['id'], ondelete='SET NULL')
    op.create_foreign_key('fk_parent_location', 'location_entities', 'location_entities', ['parent_id'], ['id'], ondelete='SET NULL')
    op.add_column('location_types', sa.Column('sub_types', postgresql.ARRAY(sa.String()), nullable=True, comment='Available sub-type options for this location type.'))
    op.alter_column('location_types', 'can_contain',
               existing_type=postgresql.ARRAY(sa.VARCHAR()),
               comment='Codes of location types that can be children of this type.',
               existing_nullable=True)
    op.alter_column('location_types', 'required_attributes',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               comment='Schema of required attributes for this location type.',
               existing_nullable=False,
               existing_server_default=sa.text("'[]'::jsonb"))
    op.alter_column('location_types', 'optional_attributes',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               comment='Schema of optional attributes for this location type.',
               existing_nullable=False,
               existing_server_default=sa.text("'[]'::jsonb"))
    op.drop_constraint('uq_location_type_code', 'location_types', type_='unique')
    op.add_column('settlements', sa.Column('zone_id', sa.UUID(), nullable=True))
    op.create_foreign_key('fk_settlement_zone_id', 'settlements', 'zones', ['zone_id'], ['id'])
    op.drop_index('ix_tool_tiers_required_tech_level', table_name='tool_tiers')
    op.drop_index('ix_tool_tiers_theme_id', table_name='tool_tiers')
    op.drop_index('ix_tool_tiers_tier_level', table_name='tool_tiers')
    op.create_table_comment(
        'tool_tiers',
        'Tool tiers define progression within themes',
        existing_comment=None,
        schema=None
    )
    op.add_column('zones', sa.Column('world_id', sa.UUID(), nullable=True))
    op.add_column('zones', sa.Column('biome_id', sa.UUID(), nullable=True))
    op.drop_constraint('uq_unique_zone', 'zones', type_='unique')
    op.create_unique_constraint('uq_zone_name_world', 'zones', ['name', 'world_id'])
    op.drop_constraint('fk_theme_to_zone', 'zones', type_='foreignkey')
    op.drop_constraint('fk_biome_to_zone', 'zones', type_='foreignkey')
    op.drop_constraint('fk_settlement_to_zone', 'zones', type_='foreignkey')
    op.create_foreign_key('fk_biome_to_zone', 'zones', 'biomes', ['biome_id'], ['id'])
    op.create_foreign_key('fk_faction_to_zone', 'zones', 'factions', ['controlling_faction'], ['id'])
    op.create_foreign_key('fk_world_to_zone', 'zones', 'worlds', ['world_id'], ['id'])
    op.drop_column('zones', 'start_date')
    op.drop_column('zones', 'settlements')
    op.drop_column('zones', 'event_timestamp')
    op.drop_column('zones', 'biomes')
    op.drop_column('zones', 'themes')
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('zones', sa.Column('themes', sa.UUID(), autoincrement=False, nullable=True))
    op.add_column('zones', sa.Column('biomes', sa.UUID(), autoincrement=False, nullable=True))
    op.add_column('zones', sa.Column('event_timestamp', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True))
    op.add_column('zones', sa.Column('settlements', sa.UUID(), autoincrement=False, nullable=True))
    op.add_column('zones', sa.Column('start_date', sa.DATE(), autoincrement=False, nullable=True))
    op.drop_constraint('fk_world_to_zone', 'zones', type_='foreignkey')
    op.drop_constraint('fk_faction_to_zone', 'zones', type_='foreignkey')
    op.drop_constraint('fk_biome_to_zone', 'zones', type_='foreignkey')
    op.create_foreign_key('fk_settlement_to_zone', 'zones', 'settlements', ['settlements'], ['id'])
    op.create_foreign_key('fk_biome_to_zone', 'zones', 'biomes', ['biomes'], ['id'])
    op.create_foreign_key('fk_theme_to_zone', 'zones', 'themes', ['themes'], ['id'])
    op.drop_constraint('uq_zone_name_world', 'zones', type_='unique')
    op.create_unique_constraint('uq_unique_zone', 'zones', ['name', 'id'], postgresql_nulls_not_distinct=False)
    op.drop_column('zones', 'biome_id')
    op.drop_column('zones', 'world_id')
    op.drop_table_comment(
        'tool_tiers',
        existing_comment='Tool tiers define progression within themes',
        schema=None
    )
    op.create_index('ix_tool_tiers_tier_level', 'tool_tiers', ['tier_level'], unique=False)
    op.create_index('ix_tool_tiers_theme_id', 'tool_tiers', ['theme_id'], unique=False)
    op.create_index('ix_tool_tiers_required_tech_level', 'tool_tiers', ['required_tech_level'], unique=False)
    op.drop_constraint('fk_settlement_zone_id', 'settlements', type_='foreignkey')
    op.drop_column('settlements', 'zone_id')
    op.create_unique_constraint('uq_location_type_code', 'location_types', ['code'], postgresql_nulls_not_distinct=False)
    op.alter_column('location_types', 'optional_attributes',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               comment=None,
               existing_comment='Schema of optional attributes for this location type.',
               existing_nullable=False,
               existing_server_default=sa.text("'[]'::jsonb"))
    op.alter_column('location_types', 'required_attributes',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               comment=None,
               existing_comment='Schema of required attributes for this location type.',
               existing_nullable=False,
               existing_server_default=sa.text("'[]'::jsonb"))
    op.alter_column('location_types', 'can_contain',
               existing_type=postgresql.ARRAY(sa.VARCHAR()),
               comment=None,
               existing_comment='Codes of location types that can be children of this type.',
               existing_nullable=True)
    op.drop_column('location_types', 'sub_types')
    op.drop_constraint('fk_parent_location', 'location_entities', type_='foreignkey')
    op.drop_constraint('fk_location_theme_id', 'location_entities', type_='foreignkey')
    op.drop_constraint('fk_location_controlling_faction', 'location_entities', type_='foreignkey')
    op.drop_constraint('fk_location_biome_id', 'location_entities', type_='foreignkey')
    op.drop_constraint('fk_parent_location_type', 'location_entities', type_='foreignkey')
    op.create_foreign_key('fk_parent_location', 'location_entities', 'location_entities', ['parent_id'], ['id'])
    op.create_foreign_key('fk_parent_location_type', 'location_entities', 'location_types', ['parent_type_id'], ['id'])
    op.drop_index(op.f('ix_location_entities_theme_id'), table_name='location_entities')
    op.drop_index(op.f('ix_location_entities_controlled_by_faction_id'), table_name='location_entities')
    op.drop_index(op.f('ix_location_entities_biome_id'), table_name='location_entities')
    op.create_index('ix_location_entities_name', 'location_entities', ['name'], unique=False)
    op.alter_column('location_entities', 'attributes',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               comment=None,
               existing_comment='Custom attributes for the location entity.',
               existing_nullable=False,
               existing_server_default=sa.text("'{}'::jsonb"))
    op.alter_column('location_entities', 'description',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=True)
    op.drop_column('location_entities', 'controlled_by_faction_id')
    op.drop_column('location_entities', 'base_danger_level')
    op.drop_column('location_entities', 'location_sub_type')
    op.drop_column('location_entities', 'biome_id')
    op.drop_column('location_entities', 'theme_id')
    op.create_unique_constraint('uq_unique_faction', 'factions', ['name', 'id'], postgresql_nulls_not_distinct=False)
    op.drop_constraint('fk_character_default_faction', 'characters', type_='foreignkey')
    op.drop_constraint('fk_char_location_id', 'characters', type_='foreignkey')
    op.create_foreign_key('fk_char_location_id', 'characters', 'locations', ['current_location_id'], ['id'], ondelete='SET NULL')
    op.drop_index(op.f('ix_characters_default_faction_id'), table_name='characters')
    op.drop_column('characters', 'default_faction_id')
    op.create_table('character_actions',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('name', sa.VARCHAR(length=200), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('character_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('action_type', postgresql.ENUM('gather', 'build', 'craft', 'trade', 'move', 'rest', name='actiontype'), autoincrement=False, nullable=False),
    sa.Column('target_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('location_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('status', postgresql.ENUM('queued', 'in_progress', 'completed', 'failed', 'cancelled', name='actionstatus'), server_default=sa.text("'queued'::actionstatus"), autoincrement=False, nullable=False),
    sa.Column('start_time', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('end_time', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('duration', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('progress', sa.DOUBLE_PRECISION(precision=53), server_default=sa.text("'0'::double precision"), autoincrement=False, nullable=False),
    sa.Column('parameters', postgresql.JSONB(astext_type=sa.Text()), server_default=sa.text("'{}'::jsonb"), autoincrement=False, nullable=True),
    sa.Column('result', postgresql.JSONB(astext_type=sa.Text()), server_default=sa.text("'{}'::jsonb"), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='character_actions_pkey')
    )
    op.create_index('ix_character_actions_status', 'character_actions', ['status'], unique=False)
    op.create_index('ix_character_actions_character_id', 'character_actions', ['character_id'], unique=False)
    op.create_index('ix_character_actions_action_type', 'character_actions', ['action_type'], unique=False)
    op.create_table('locations',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('name', sa.VARCHAR(length=150), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('world_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('pos_x', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('pos_y', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('pos_z', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('_metadata', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True, comment='Data about the location, e.g., traversability, weather effects.'),
    sa.ForeignKeyConstraint(['world_id'], ['worlds.id'], name='fk_location_world_id', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='locations_pkey')
    )
    op.create_index('ix_locations_world_id', 'locations', ['world_id'], unique=False)
    op.create_index('ix_locations_name', 'locations', ['name'], unique=False)
    op.create_index('ix_location_world_coords', 'locations', ['world_id', 'pos_x', 'pos_y', 'pos_z'], unique=False)
    op.drop_table('resource_node_resources')
    op.drop_index(op.f('ix_wildlife_wildlife_type'), table_name='wildlife')
    op.drop_index(op.f('ix_wildlife_threat_level'), table_name='wildlife')
    op.drop_index(op.f('ix_wildlife_name'), table_name='wildlife')
    op.drop_index(op.f('ix_wildlife_location_id'), table_name='wildlife')
    op.drop_table('wildlife')
    op.drop_index(op.f('ix_travel_links_to_location_id'), table_name='travel_links')
    op.drop_index(op.f('ix_travel_links_from_location_id'), table_name='travel_links')
    op.drop_table('travel_links')
    op.drop_index(op.f('ix_resource_nodes_visibility'), table_name='resource_nodes')
    op.drop_index(op.f('ix_resource_nodes_status'), table_name='resource_nodes')
    op.drop_index(op.f('ix_resource_nodes_name'), table_name='resource_nodes')
    op.drop_index(op.f('ix_resource_nodes_location_id'), table_name='resource_nodes')
    op.drop_table('resource_nodes')
    op.drop_index(op.f('ix_resource_node_blueprint_resources_theme_id'), table_name='resource_node_blueprint_resources')
    op.drop_table('resource_node_blueprint_resources')
    op.drop_index(op.f('ix_resource_instances_owner_type'), table_name='resource_instances')
    op.drop_index(op.f('ix_resource_instances_owner_id'), table_name='resource_instances')
    op.drop_table('resource_instances')
    op.drop_index(op.f('ix_character_faction_relationships_faction_id'), table_name='character_faction_relationships')
    op.drop_index(op.f('ix_character_faction_relationships_character_id'), table_name='character_faction_relationships')
    op.drop_table('character_faction_relationships')
    op.drop_index(op.f('ix_resource_node_blueprints_status'), table_name='resource_node_blueprints')
    op.drop_index(op.f('ix_resource_node_blueprints_name'), table_name='resource_node_blueprints')
    op.drop_table('resource_node_blueprints')
    # ### end Alembic commands ###
