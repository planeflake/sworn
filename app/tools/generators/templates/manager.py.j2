from typing import List, Optional, Dict, Any, Union
from uuid import UUID, uuid4
from sqlalchemy.ext.asyncio import AsyncSession

from app.game_state.entities.{{ entity_file }} import {{ entity_name }}Entity
from app.game_state.repositories.{{ repository_file }} import {{ entity_name }}Repository
from app.game_state.managers.base_manager import BaseManager

class {{ entity_name }}Manager(BaseManager):
    """
    Manager for {{ entity_name_readable }} operations.
    Provides domain logic for {{ entity_name_readable }} entities.
    """
    
    def __init__(self, repository: {{ entity_name }}Repository):
        self.repository = repository
    
    async def create_{{ entity_name_snake }}(
        self, 
        session: AsyncSession,
        {% for field in fields %}
        {% if field.name != 'id' %}
        {{ field.name }}: {{ field.type_annotation }}{% if not field.required %} = None{% endif %},
        {% endif %}
        {% endfor %}
        **kwargs
    ) -> {{ entity_name }}Entity:
        """
        Create a new {{ entity_name_readable }}
        """
        # Generate a new UUID for this entity
        id = uuid4()
        
        # Create entity
        entity = {{ entity_name }}Entity(
            id=id,
            {% for field in fields %}
            {% if field.name != 'id' %}
            {{ field.name }}={{ field.name }},
            {% endif %}
            {% endfor %}
            **kwargs
        )
        
        # Save entity
        created_entity = await self.repository.create(session, entity)
        return created_entity
    
    async def get_{{ entity_name_snake }}(self, session: AsyncSession, id: Union[UUID, str]) -> Optional[{{ entity_name }}Entity]:
        """
        Get {{ entity_name_readable }} by ID
        """
        return await self.repository.get_by_id(session, id)
    
    async def get_all_{{ entity_name_snake_plural }}(self, session: AsyncSession) -> List[{{ entity_name }}Entity]:
        """
        Get all {{ entity_name_readable }}s
        """
        return await self.repository.get_all(session)
    
    async def update_{{ entity_name_snake }}(
        self, 
        session: AsyncSession, 
        id: Union[UUID, str], 
        {% for field in fields %}
        {% if field.name != 'id' %}
        {{ field.name }}: {{ field.type_annotation }} = None,
        {% endif %}
        {% endfor %}
    ) -> Optional[{{ entity_name }}Entity]:
        """
        Update {{ entity_name_readable }}
        """
        # Get existing entity
        entity = await self.repository.get_by_id(session, id)
        if not entity:
            return None
        
        # Update fields if provided
        {% for field in fields %}
        {% if field.name != 'id' %}
        if {{ field.name }} is not None:
            entity.{{ field.name }} = {{ field.name }}
        {% endif %}
        {% endfor %}
        
        # Save updated entity
        updated_entity = await self.repository.update(session, entity)
        return updated_entity
    
    async def delete_{{ entity_name_snake }}(self, session: AsyncSession, id: Union[UUID, str]) -> bool:
        """
        Delete {{ entity_name_readable }}
        """
        return await self.repository.delete(session, id)