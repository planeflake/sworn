from typing import List, Optional, Dict, Any, Union, Type
from uuid import UUID
from datetime import datetime, date
from sqlalchemy.ext.asyncio import AsyncSession

from app.db.models.{{ model_file }} import {{ model_name }}
from app.game_state.entities.{{ entity_file }} import {{ entity_name }}Entity
from app.game_state.repositories.base_repository import BaseRepository

class {{ entity_name }}Repository(BaseRepository[{{ entity_name }}Entity, {{ model_name }}, UUID]):
    """
    Repository for {{ entity_name_readable }} operations.
    Handles database interactions for {{ model_name }} model.
    """
    
    def __init__(self, db: AsyncSession):
        """Initialize the repository with database session and model/entity classes"""
        super().__init__(db, {{ model_name }}, {{ entity_name }}Entity)
    
    # All standard CRUD operations are inherited from BaseRepository:
    # - save(entity) - Create or update
    # - find_by_id(entity_id) - Get by ID
    # - find_all(skip, limit) - Get all with pagination
    # - delete(entity_id) - Delete by ID
    # - exists(entity_id) - Check if entity exists
    # - find_by_name(name) - Get by exact name
    # - find_by_name_insensitive(name) - Case-insensitive name search
    # - find_all_by_name(name, partial_match) - Find all with matching name
    
    # Add any custom repository methods specific to {{ entity_name }} below