from typing import List, Optional
from uuid import UUID
from fastapi import APIRouter, Depends, HTTPException, status, Query

from app.api.schemas.{{ schema_file }} import {{ entity_name }}Create, {{ entity_name }}Update, {{ entity_name }}Read
from app.game_state.services.{{ service_file }} import {{ entity_name }}Service

# Initialize router with appropriate prefix and tags
router = APIRouter(
    prefix="/{{ api_route_prefix }}",
    tags=["{{ api_tag }}"]
)

# Dependency to get service
def get_{{ entity_name_snake }}_service():
    # Import required dependencies
    from app.game_state.repositories.{{ repository_file }} import {{ entity_name }}Repository
    from app.game_state.managers.{{ manager_file }} import {{ entity_name }}Manager
    
    # Create service with dependencies
    repository = {{ entity_name }}Repository()
    manager = {{ entity_name }}Manager(repository)
    service = {{ entity_name }}Service(manager)
    
    return service

@router.post("/", response_model={{ entity_name }}Read, status_code=status.HTTP_201_CREATED)
async def create_{{ entity_name_snake }}(
    {{ entity_name_snake }}: {{ entity_name }}Create,
    service: {{ entity_name }}Service = Depends(get_{{ entity_name_snake }}_service)
):
    """
    Create a new {{ entity_name_readable }}
    """
    try:
        created_entity = await service.create_{{ entity_name_snake }}(
            {% for field in fields %}
            {% if field.name != 'id' %}
            {{ field.name }}={{ entity_name_snake }}.{{ field.name }},
            {% endif %}
            {% endfor %}
        )
        return created_entity.to_dict()
    except Exception as e:
        raise HTTPException(
            status_code=status.HTTP_400_BAD_REQUEST,
            detail=str(e)
        )

@router.get("/{id}", response_model={{ entity_name }}Read)
async def get_{{ entity_name_snake }}(
    id: UUID,
    service: {{ entity_name }}Service = Depends(get_{{ entity_name_snake }}_service)
):
    """
    Get {{ entity_name_readable }} by ID
    """
    entity = await service.get_{{ entity_name_snake }}(id)
    if not entity:
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND,
            detail="{{ entity_name_readable }} not found"
        )
    return entity.to_dict()

@router.get("/", response_model=List[{{ entity_name }}Read])
async def get_all_{{ entity_name_snake_plural }}(
    {% for field in search_fields %}
    {{ field.name }}: Optional[{{ field.type_annotation }}] = Query(None, description="{{ field.description }}"),
    {% endfor %}
    service: {{ entity_name }}Service = Depends(get_{{ entity_name_snake }}_service)
):
    """
    Get all {{ entity_name_readable }}s with optional filtering
    """
    # Get all entities
    entities = await service.get_all_{{ entity_name_snake_plural }}()
    
    # Apply filters if provided
    filtered_entities = entities
    {% for field in search_fields %}
    if {{ field.name }} is not None:
        filtered_entities = [e for e in filtered_entities if e.{{ field.name }} == {{ field.name }}]
    {% endfor %}
    
    # Convert to dict representation
    return [entity.to_dict() for entity in filtered_entities]

@router.put("/{id}", response_model={{ entity_name }}Read)
async def update_{{ entity_name_snake }}(
    id: UUID,
    {{ entity_name_snake }}_update: {{ entity_name }}Update,
    service: {{ entity_name }}Service = Depends(get_{{ entity_name_snake }}_service)
):
    """
    Update {{ entity_name_readable }}
    """
    # Convert update data to kwargs
    update_data = {{ entity_name_snake }}_update.dict(exclude_unset=True)
    
    # Update entity
    updated_entity = await service.update_{{ entity_name_snake }}(id, **update_data)
    
    if not updated_entity:
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND,
            detail="{{ entity_name_readable }} not found"
        )
    
    return updated_entity.to_dict()

@router.delete("/{id}", status_code=status.HTTP_204_NO_CONTENT)
async def delete_{{ entity_name_snake }}(
    id: UUID,
    service: {{ entity_name }}Service = Depends(get_{{ entity_name_snake }}_service)
):
    """
    Delete {{ entity_name_readable }}
    """
    deleted = await service.delete_{{ entity_name_snake }}(id)
    
    if not deleted:
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND,
            detail="{{ entity_name_readable }} not found"
        )
    
    return None