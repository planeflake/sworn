# --- START OF FILE app/game_state/schemas/building_instance_schema.py ---

import uuid
from pydantic import BaseModel, Field # For Pydantic v2, if using v1 import ConfigDict
from typing import Optional, List, Dict
from datetime import datetime

#from app.game_state.entities.building import BuildingEntityPydantic # Import the enum
from app.game_state.enums.building import BuildingStatus

# Generate some example UUIDs for use in the schema example
EXAMPLE_BLUEPRINT_ID = uuid.uuid4()
EXAMPLE_SETTLEMENT_ID = uuid.uuid4()
EXAMPLE_RESOURCE_ID_WOOD = uuid.uuid4()
EXAMPLE_RESOURCE_ID_STONE = uuid.uuid4()
EXAMPLE_FEATURE_ID_1 = uuid.uuid4()

class BuildingInstanceBase(BaseModel):
    """Base schema for common building instance fields."""
    name: str = Field(..., min_length=1, max_length=150, description="Name of this specific building instance.")
    building_blueprint_id: uuid.UUID = Field(..., description="ID of the BuildingBlueprint this instance is based on.")
    settlement_id: uuid.UUID = Field(..., description="ID of the Settlement this building belongs to.")

    level: int = Field(default=1, ge=1, description="Current level of the building.")
    status: BuildingStatus = Field(default=BuildingStatus.UNDER_CONSTRUCTION, description="Current operational status.")
    current_hp: int = Field(default=100, ge=0, description="Current health points.")
    max_hp: int = Field(default=100, ge=1, description="Maximum health points.")

    inhabitants_count: int = Field(default=0, ge=0, description="Number of characters residing in this building.")
    workers_count: int = Field(default=0, ge=0, description="Number of characters working in this building.")

    construction_progress: float = Field(default=0.0, ge=0.0, le=1.0, description="Construction progress of the current stage (0.0 to 1.0).")
    current_stage_number: int = Field(default=1, ge=0, description="The current construction/operational stage number.")

    active_features: List[uuid.UUID] = Field(default_factory=list, description="List of IDs of active optional features from the blueprint.")
    stored_resources: Dict[uuid.UUID, int] = Field(default_factory=dict, description="Resources stored in the building (resource_id: quantity).")
    assigned_workers_details: Dict[str, int] = Field(default_factory=dict, description="Detailed worker assignments (e.g., profession_key: count).")
    instance_description: Optional[str] = Field(None, max_length=500, description="Optional description specific to this instance.")

class BuildingInstanceCreate(BuildingInstanceBase):
    """
    Schema for creating a new building instance.
    ID will be generated by the server. Timestamps are also server-managed.
    """
    # Pydantic V2 model_config for examples
    model_config = {
        "json_schema_extra": {
            "examples": [
                {
                    "name": "The Cozy Hearth Inn",
                    "building_blueprint_id": str(EXAMPLE_BLUEPRINT_ID), # Example: "a1b2c3d4-e5f6-7890-1234-567890abcdef"
                    "settlement_id": str(EXAMPLE_SETTLEMENT_ID),       # Example: "b1c2d3e4-f5g6-7890-1234-567890abcdef"
                    "level": 1,
                    "status": BuildingStatus.UNDER_CONSTRUCTION.value, # Use enum's value for JSON
                    "current_hp": 50,
                    "max_hp": 250,
                    "inhabitants_count": 0,
                    "workers_count": 0,
                    "construction_progress": 0.0,
                    "current_stage_number": 1,
                    "active_features": [str(EXAMPLE_FEATURE_ID_1)],
                    "stored_resources": {
                        str(EXAMPLE_RESOURCE_ID_WOOD): 10,
                        str(EXAMPLE_RESOURCE_ID_STONE): 5
                    },
                    "assigned_workers_details": {
                        "carpenter": 1
                    },
                    "instance_description": "A new inn, currently just a foundation."
                },
                {
                    "name": "Watchpost Alpha",
                    "building_blueprint_id": str(uuid.uuid4()), # Another blueprint
                    "settlement_id": str(EXAMPLE_SETTLEMENT_ID),
                    "level": 1,
                    "status": BuildingStatus.UNDER_CONSTRUCTION.value,
                    "current_hp": 20,
                    "max_hp": 150,
                    "inhabitants_count": 0,
                    "workers_count": 0,
                    "construction_progress": 0.0,
                    "current_stage_number": 1,
                    "active_features": [],
                    "stored_resources": {},
                    "assigned_workers_details": {},
                    "instance_description": "Basic wooden watchpost under construction."
                }
            ]
        }
    }
    # For Pydantic V1, you would use:
    # class Config:
    #     schema_extra = {
    #         "example": { # Note: FastAPI typically picks up the first example if multiple are provided this way for V1
    #             "name": "The Cozy Hearth Inn",
    #             "building_blueprint_id": "a1b2c3d4-e5f6-7890-1234-567890abcdef",
    #             "settlement_id": "b1c2d3e4-f5g6-7890-1234-567890abcdef",
    #             "level": 1,
    #             "status": BuildingStatus.UNDER_CONSTRUCTION.value,
    #             "current_hp": 50,
    #             "max_hp": 250,
    #             # ... fill other fields as above
    #         }
    #     }


class BuildingInstanceUpdate(BaseModel):
    """Schema for updating a building instance. All fields optional."""
    name: Optional[str] = Field(None, min_length=1, max_length=150)
    level: Optional[int] = Field(None, ge=1)
    status: Optional[BuildingStatus] = None
    current_hp: Optional[int] = Field(None, ge=0)
    max_hp: Optional[int] = Field(None, ge=1)

    inhabitants_count: Optional[int] = Field(None, ge=0)
    workers_count: Optional[int] = Field(None, ge=0)

    construction_progress: Optional[float] = Field(None, ge=0.0, le=1.0)
    current_stage_number: Optional[int] = Field(None, ge=0)

    active_features: Optional[List[uuid.UUID]] = None
    stored_resources: Dict[str, int] = Field(default_factory=dict, description="Resources stored (resource_id_str: quantity).")
    assigned_workers_details: Dict[str, int] = Field(default_factory=dict, description="Detailed worker assignments (role_str/profession_id_str: count).")
    instance_description: Optional[str] = Field(None, max_length=500)

    # Pydantic V2 model_config for examples
    model_config = {
        "json_schema_extra": {
            "examples": [
                {
                    "name": "The Sturdy Hearth Inn",
                    "level": 2,
                    "status": BuildingStatus.ACTIVE.value,
                    "current_hp": 240,
                    "assigned_workers_details": {
                        "carpenter": 0, # Carpenter finished their job
                        "innkeeper": 1,
                        "cook": 1
                    },
                    "instance_description": "The inn is now fully operational and reinforced."
                }
            ]
        }
    }
    # For Pydantic V1:
    # class Config:
    #     schema_extra = {
    #         "example": {
    #             "status": BuildingStatus.ACTIVE.value,
    #             "current_hp": 240
    #         }
    #     }


class BuildingInstanceRead(BuildingInstanceBase):
    """Schema for reading/returning a building instance."""
    id: uuid.UUID
    created_at: datetime
    updated_at: Optional[datetime] = None

    model_config = { # Pydantic V2+
        "from_attributes": True,
        "use_enum_values": True, # Ensure enums are serialized as their values (strings)
    }
    # For Pydantic V1:
    # class Config:
    #     orm_mode = True
    #     use_enum_values = True


# --- END OF FILE app/game_state/schemas/building_instance_schema.py ---